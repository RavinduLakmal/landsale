Q1
package demo;
public class Demo {
    public static void main(String[] niroth) throws InterruptedException {
        for (int i = 0; i < 100; i++) {
            System.out.println("Program A : "+i);
            Thread.sleep(100);
        }
        
        for (int i = 0; i < 100; i++) {
            System.out.println("Program B : "+i);
            Thread.sleep(100);
        }
        
        for (int i = 0; i < 100; i++) {
            System.out.println("Main Program : "+i);
            Thread.sleep(100);
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q2
package demo;
class ProgramA extends Thread{

    @Override
    public void run() {
    for (int i = 0; i < 100; i++) {
            System.out.println("Program A : "+i);
            try{Thread.sleep(100);}catch(InterruptedException ex){}
        }    
    }
}
class ProgramB extends Thread{

    @Override
    public void run() {
        for (int i = 0; i < 100; i++) {
            System.out.println("Program B : "+i);
            try{Thread.sleep(100);}catch(InterruptedException ex){}
        }
    }
}
public class Demo {
    public static void main(String[] niroth) throws InterruptedException {
        new ProgramA().start();
        new ProgramB().start();
        for (int i = 0; i < 100; i++) {
            System.out.println("Main Program : "+i);
            Thread.sleep(100);
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q3
package demo;
class ProgramA extends Thread{

    @Override
    public void run() {
    for (int i = 0; i < 1000; i++) {
            System.out.println("Program A : "+i);
            //try{Thread.sleep(100);}catch(InterruptedException ex){}
        }    
    }
}
class ProgramB extends Thread{

    @Override
    public void run() {
        for (int i = 0; i < 1000; i++) {
            System.out.println("Program B : "+i);
            //try{Thread.sleep(100);}catch(InterruptedException ex){}
        }
    }
}
public class Demo {
    public static void main(String[] niroth) throws InterruptedException {
        new ProgramA().start();
        new ProgramB().start();
        for (int i = 0; i < 1000; i++) {
            System.out.println("Main Program : "+i);
            //Thread.sleep(100);
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q4 Exception in a thread
========================
package demo;
class ProgramA extends Thread{

    @Override
    public void run() {
    for (int i = 0; i < 1000; i++) {
            System.out.println("Program A : "+i);
        }    
    }
}
class ProgramB extends Thread{

    @Override
    public void run() {
        for (int i = 0; i < 1000; i++) {
            System.out.println("Program B : "+i);
        }
    }
}
public class Demo {
    public static void main(String[] niroth) throws InterruptedException {
        new ProgramA().start();
        new ProgramB().start();
        for (int i = 0; i < 1000; i++) {
            System.out.println("Main Program : "+i);
            if(i==100){
                int x=90/0;//throws ArithmeticException
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q5 Exercise (GUI Even Queue)
============================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo;

/**
 *
 * @author niroth
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N

        startButton.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        startButton.setText("start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 69, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int x=Integer.parseInt(jTextField1.getText());
        for (int i = 0; i < 10; i++) {
            jTextArea1.append("Program "+x+" : "+i+"\n");
            try{Thread.sleep(1000);}catch(Exception ex){}
        }
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton startButton;
    // End of variables declaration                   
}

//////////////////////////////////////////////////////////////////////////////////////////
Q6 From Q5 (Using Multi-threaded programming)
============================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo;

/**
 *
 * @author niroth
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N

        startButton.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        startButton.setText("start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 69, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int x = Integer.parseInt(jTextField1.getText());
        new Thread() {
            @Override
            public void run() {
                for (int i = 0; i < 10; i++) {
                    jTextArea1.append("Program " + x + " : "+i+ "\n");
                    
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                }
            }
        }.start();
    }                                           

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton startButton;
    // End of variables declaration                   
}

//////////////////////////////////////////////////////////////////////////////////////////
Q7 Exercise2 (GUI Event Queue)
==============================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo;

/**
 *
 * @author niroth
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N

        startButton.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        startButton.setText("start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startButton))
                .addGap(144, 144, 144))
        );

        pack();
    }// </editor-fold>                        

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int x = Integer.parseInt(jTextField1.getText());
        int i=0;
        while(true){
             System.out.println("Program "+x+" : "+i++);
        }
    }                                           

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton startButton;
    // End of variables declaration                   
}

//////////////////////////////////////////////////////////////////////////////////////////
Q8 From Q7 Using threads
========================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo;

/**
 *
 * @author niroth
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N

        startButton.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        startButton.setText("start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startButton))
                .addGap(144, 144, 144))
        );

        pack();
    }// </editor-fold>                        

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int x = Integer.parseInt(jTextField1.getText());
        new Thread() {
            public void run() {
                int i = 0;
                while (true) {
                    System.out.println("Program " + x + " : " + i++);
                }
            }
        }.start();

    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton startButton;
    // End of variables declaration                   
}

//////////////////////////////////////////////////////////////////////////////////////////
Q9 Exercise (Anonymous Inner Classes)
=====================================
package demo;

public class Demo {

    public static void main(String[] niroth) throws InterruptedException {
        //-----------------Start ProgramA as a Thread------------------
        new Thread() {
            @Override
            public void run() {
                for (int i = 0; i < 100; i++) {
                    System.out.println("Program A : " + i);
                    try{Thread.sleep(100);}catch(InterruptedException ex){}
                }
            }
        }.start();
        
        //-----------------Start ProgramB as a Thread------------------
        new Thread() {
            public void run() {
                for (int i = 0; i < 100; i++) {
                    System.out.println("Program B : " + i);
                    try{Thread.sleep(100);}catch(InterruptedException ex){}
                }
            }
        }.start();
        
        //
        for (int i = 0; i < 100; i++) {
            System.out.println("Main Program : " + i);
            Thread.sleep(100);
        }
    }
}
//////////////////////////////////////////////////////////////////////////////////////////
    Methods of Thread
//////////////////////////////////////////////////////////////////////////////////////////
Q10 start() vs run()
====================
package demo;

public class Demo {

    public static void main(String[] niroth) throws InterruptedException {
        //-----------------Start ProgramA as a Thread------------------
        new Thread() {
            @Override
            public void run() {
                for (int i = 0; i < 100; i++) {
                    System.out.println("Program A : " + i);
                    try{Thread.sleep(100);}catch(InterruptedException ex){}
                }
            }
        }.run();
        
        //-----------------Start ProgramB as a Thread------------------
        new Thread() {
            public void run() {
                for (int i = 0; i < 100; i++) {
                    System.out.println("Program B : " + i);
                    try{Thread.sleep(100);}catch(InterruptedException ex){}
                }
            }
        }.run();
        
        //
        for (int i = 0; i < 100; i++) {
            System.out.println("Main Program : " + i);
            Thread.sleep(100);
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q11 Thread Naming
=================
package demo;
class MyThread extends Thread{
    public void run(){
        System.out.println("MyTHread");
    }
}
public class Demo {

    public static void main(String[] args){
        MyThread t1=new MyThread();
        MyThread t2=new MyThread();
        System.out.println("Name t1 : "+t1.getName());  //Thread 0
        System.out.println("Name t2 : "+t2.getName());  //Thread 2
        
        t1.setName("MyThread 1");
        t2.setName("MyThread 2");
        System.out.println("Name t1 : "+t1.getName());  //MyThread 0
        System.out.println("Name t2 : "+t2.getName());  //MyThread 2
        
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q12 From Q11
============
package demo;
class MyThread extends Thread{

    public MyThread(String name) {
        super(name);
        //setName(name);
    }
    
    public void run(){
        System.out.println("MyTHread");
    }
}
public class Demo {

    public static void main(String[] args){
        MyThread t1=new MyThread("One");
        MyThread t2=new MyThread("Two");
        System.out.println("Name t1 : "+t1.getName());  //Thread 0
        System.out.println("Name t2 : "+t2.getName());  //Thread 2
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q13 publc static Thread currentThread()
=======================================
package demo;
public class Demo {

    public static void main(String[] args){
        System.out.println("Start main");
        Thread t1=Thread.currentThread();
        System.out.println("Name of main : " +t1.getName());
        //System.out.println(t1); //t1.toString()
        t1.setName("MyMain");
        System.out.println("Name of main : " +t1.getName());
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q14 Exercise (run() vs start())
===============================
package demo;
class MyThread extends Thread{

    public MyThread(String name) {
        super(name);
    }
    
   public void run(){
       Thread t1 = Thread.currentThread();
        System.out.println(t1.getName());
    }
}
public class Demo {

    public static void main(String[] args){
        MyThread t1=new MyThread("MyThread");
        t1.start(); //or t1.run()
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
    Thread State Transiton Diagram
//////////////////////////////////////////////////////////////////////////////////////////
Q15
package demo;

class MyThread extends Thread {

    public MyThread(String name) {
        super(name);
    }

    public void run() {
        for (int i = 0; i < 10; i++) {
            System.out.println(getName() + ": " + i);
        }
    }
}

public class Demo {

    public static void main(String[] args) {
        MyThread t1 = new MyThread("One");
        MyThread t2 = new MyThread("Two");
        MyThread t3 = new MyThread("Three");
        //
        //
        System.out.println("t1 : "+t1.getState());
        System.out.println("t2 : "+t2.getState());
        System.out.println("t3 : "+t3.getState());
        
        t1.start();
        t2.start();
        t3.start();
        try{Thread.sleep(2000);}catch(InterruptedException exe){}
        
        System.out.println("t1 : "+t1.getState());
        System.out.println("t2 : "+t2.getState());
        System.out.println("t3 : "+t3.getState());        
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
    Thread Priority    
//////////////////////////////////////////////////////////////////////////////////////////
Q16
package demo;

class MyThread extends Thread {

    public MyThread(String name) {
        super(name);
    }

    public void run() {
        for (int i = 0; i < 1000; i++) {
            System.out.println(getName() + ": " + i);
        }
    }
}

public class Demo {

    public static void main(String[] args) {
        MyThread t1 = new MyThread("One");
        MyThread t2 = new MyThread("Two");
        MyThread t3 = new MyThread("Three");
        
        System.out.println("t1 : "+t1.getPriority());
        System.out.println("t2 : "+t2.getPriority());
        System.out.println("t3 : "+t3.getPriority());

        t1.setPriority(Thread.MIN_PRIORITY);//1
        t2.setPriority(Thread.NORM_PRIORITY);//5
        t3.setPriority(Thread.MAX_PRIORITY);//10

        System.out.println("t1 : "+t1.getPriority());
        System.out.println("t2 : "+t2.getPriority());
        System.out.println("t3 : "+t3.getPriority());        
    }
}
 
//////////////////////////////////////////////////////////////////////////////////////////
Q17 Exercise
============
package demo;

class MyThread extends Thread {

    public MyThread(String name) {
        super(name);
    }

    public void run() {
        for (int i = 0; i < 1000; i++) {
            System.out.println(getName() + ": " + i);
        }
    }
}

public class Demo {

    public static void main(String[] args) {
        MyThread t1 = new MyThread("One");
        MyThread t2 = new MyThread("Two");
        MyThread t3 = new MyThread("Three");
        t1.setPriority(Thread.MIN_PRIORITY);//1
        t2.setPriority(Thread.NORM_PRIORITY);//5
        t3.setPriority(Thread.MAX_PRIORITY);//10
        t1.start();
        t2.start();
        t3.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
    Thread Yielding
//////////////////////////////////////////////////////////////////////////////////////////
Q18
package demo;

class MyThread extends Thread {

    public MyThread(String name) {
        super(name);
    }

    public void run() {
        for (int i = 0; i < 1000; i++) {
            System.out.println(getName() + ": " + i);
            if(i%10==0){Thread.yield();}
        }
    }
}

public class Demo {

    public static void main(String[] args) {
        MyThread t1 = new MyThread("One");
        MyThread t2 = new MyThread("Two");
        MyThread t3 = new MyThread("Three");
        t1.start();
        t2.start();
        t3.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
       Join Threads
//////////////////////////////////////////////////////////////////////////////////////////
Q19
package demo;

import java.util.logging.Level;
import java.util.logging.Logger;

class MyThread extends Thread {

    public MyThread(String name) {
        super(name);
    }

    public void run() {
        for (int i = 0; i < 10; i++) {
            System.out.println(getName() + ": " + i);
        }
    }
}

public class Demo {

    public static void main(String[] args) {
        MyThread t1 = new MyThread("One");
        MyThread t2 = new MyThread("Two");
        MyThread t3 = new MyThread("Three");
        //
        //
        System.out.println("t1 : "+t1.getState());
        System.out.println("t2 : "+t2.getState());
        System.out.println("t3 : "+t3.getState());
        
        t1.start();
        t2.start();
        t3.start();
        try{
            t1.join();
            t2.join();
            t3.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(Demo.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("t1 : "+t1.getState());
        System.out.println("t2 : "+t2.getState());
        System.out.println("t3 : "+t3.getState());        
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q20 Exercise
============
package demo;

import java.util.logging.Level;
import java.util.logging.Logger;

class MyThread extends Thread {
    public MyThread(String name) {
        super(name);
    }
    public void run() {
        for (int i = 0; i < 10; i++) {
            System.out.println(getName() + ": " + i);
            try {Thread.sleep(1000);} catch (InterruptedException ex) {}
        }
    }
}

public class Demo {

    public static void main(String[] args) {
        MyThread t1 = new MyThread("One");
        t1.start();
        for (int i = 0; i < 10; i++) {
            System.out.println("Main : "+i);
            try {Thread.sleep(1000);} catch (InterruptedException ex) {}
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q21 From Q20
============
package demo;

import java.util.logging.Level;
import java.util.logging.Logger;

class MyThread extends Thread {
    public MyThread(String name) {
        super(name);
    }
    public void run() {
        for (int i = 0; i < 10; i++) {
            System.out.println(getName() + ": " + i);
            try {Thread.sleep(1000);} catch (InterruptedException ex) {}
        }
    }
}

public class Demo {

    public static void main(String[] args) throws InterruptedException {
        MyThread t1 = new MyThread("One");
        t1.start();
        for (int i = 0; i < 10; i++) {
            if(i==5){
                try {t1.join();} catch (InterruptedException ex) {}
            }
            System.out.println("Main : "+i);
            try {Thread.sleep(1000);} catch (InterruptedException ex) {}
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q22 Exercise
=============
package demo;

class MyThread extends Thread {
    public MyThread(String name, Thread t) {
        super(name);
    }
    public void run() {
           System.out.println("Start "+getName());
           try{sleep(3000);}catch(InterruptedException ex){}
           System.out.println("End "+getName());
    }
}

public class Demo {

    public static void main(String[] args) throws InterruptedException {
        System.out.println("Start main");
        Thread tMain=Thread.currentThread();
        MyThread t1 = new MyThread("One",tMain);
        t1.start();
        try{t1.join();}catch(InterruptedException ex){}
        System.out.println("End main");
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q23 Join(time)
==============
package demo;

class MyThread extends Thread {
    Thread tMain; 
    public MyThread(String name, Thread tMain) {
        super(name);
        this.tMain=tMain;
    }
    public void run() {
           System.out.println("Start "+getName());
           try{sleep(3000);}catch(InterruptedException ex){}
           System.out.println("main thread : "+tMain.getState());
           System.out.println("End "+getName());
    }
}

public class Demo {

    public static void main(String[] args) throws InterruptedException {
        System.out.println("Start main");
        Thread tMain=Thread.currentThread();
        MyThread t1 = new MyThread("One",tMain);
        t1.start();
        try{t1.join(1000);}catch(InterruptedException ex){}
        System.out.println("End main");
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q24 Exercise
============
package demo;

public class Demo {

    public static void main(String[] args) throws InterruptedException {
        System.out.println("Start main");
        Thread tMain=Thread.currentThread();
        try{tMain.join();}catch(InterruptedException ex){}
        System.out.println("End main");
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q25 From Q24
============
package demo;

public class Demo {

    public static void main(String[] args) throws InterruptedException {
        System.out.println("Start main");
        Thread tMain=Thread.currentThread();
        try{tMain.join(5000);}catch(InterruptedException ex){}
        System.out.println("End main");
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
    Implementing Interface "Runnable"
//////////////////////////////////////////////////////////////////////////////////////////
Q26
package demo;
class ProgramA implements Runnable{

    public void run() {
        for (int i = 0; i < 1000; i++) {
            System.out.println("ProgramA : "+i);
        }
    }
}
public class Demo {

    public static void main(String[] args) throws InterruptedException {
        ProgramA a1=new ProgramA();
        //a1.start();
        Thread t1=new Thread(a1); //Thread(Runnable r)
        t1.start();
        for (int i = 0; i < 1000; i++) {
            System.out.println("Main : "+i);
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q27 Exercise
============
package demo;
class MyThread extends Thread{

    public MyThread(Runnable e) {
        
    }
}

class ProgramA implements Runnable{
   public void run() {
       System.out.println("MyRunnable");
    }
}
public class Demo {

    public static void main(String[] args) throws InterruptedException {
        ProgramA a1=new ProgramA();
        MyThread t1=new MyThread(a1);
        t1.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q28 From Q27
============
package demo;
class MyThread extends Thread{

    public MyThread(Runnable e) {
        super(e);
    }
}

class ProgramA implements Runnable{
   public void run() {
       System.out.println("MyRunnable");
    }
}
public class Demo {

    public static void main(String[] args) throws InterruptedException {
        ProgramA a1=new ProgramA();
        MyThread t1=new MyThread(a1);
        t1.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q29 From Q28
============
package demo;
class MyThread extends Thread{

    public MyThread(Runnable e) {
        super(e);
    }

    @Override
    public void run() {
        System.out.println("MyThread");
    }
    
}

class ProgramA implements Runnable{
   public void run() {
       System.out.println("MyRunnable");
    }
}
public class Demo {

    public static void main(String[] args) throws InterruptedException {
        ProgramA a1=new ProgramA();
        MyThread t1=new MyThread(a1);
        t1.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q30 From Q1
===========
package demo;
public class Demo {
    public static void main(String[] niroth) throws InterruptedException {
        for (int i = 0; i < 100; i++) {
            System.out.println("Program A : "+i);
            Thread.sleep(100);
        }
        
        for (int i = 0; i < 100; i++) {
            System.out.println("Program B : "+i);
            Thread.sleep(100);
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q31 From Q30 Method I (extends Thread)
=================== ================
package demo;

public class Demo {

    public static void main(String[] niroth) throws InterruptedException {
        new Thread() {
            public void run() {
                for (int i = 0; i < 100; i++) {
                    System.out.println("Program A : " + i);
                    try{Thread.sleep(100);}catch(InterruptedException ex){}
                }
            }
        }.start();

                new Thread() {
            public void run() {
                for (int i = 0; i < 100; i++) {
                    System.out.println("Program B : " + i);
                    try{Thread.sleep(100);}catch(InterruptedException ex){}
                }
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q32 From Q30 Method II (implements Runnable)
====================== =====================
package demo;



public class Demo {

    public static void main(String[] niroth) throws InterruptedException {
        Runnable r1=new Runnable(){
            public void run() {
                for (int i = 0; i < 100; i++) {
                    System.out.println("Program A : " + i);
                    try{Thread.sleep(100);}catch(InterruptedException ex){}
                }
            }
        };
        new Thread(r1).start();
        Runnable r2=new Runnable(){
            public void run() {
                for (int i = 0; i < 100; i++) {
                    System.out.println("Program B : " + i);
                    try{Thread.sleep(100);}catch(InterruptedException ex){}
                }
            }
        };
        new Thread(r2).start();        
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q33 From Q30 Method IV (Using Lambda Expression)
================================================
package demo;

public class Demo {

    public static void main(String[] niroth) throws InterruptedException {
        Runnable r1 = () -> {
            for (int i = 0; i < 100; i++) {
                System.out.println("Program A : " + i);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                }
            }
        };
        new Thread(r1).start();

        Runnable r2 = () -> {
            for (int i = 0; i < 100; i++) {
                System.out.println("Program B : " + i);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                }
            }
        };
        new Thread(r2).start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q34 From Q33
============
package demo;

public class Demo {

    public static void main(String[] niroth) throws InterruptedException {
        new Thread(()->{
            for (int i = 0; i < 10; i++) {
                System.out.println("ProgramB : "+i);
                try{Thread.sleep(1000);}catch(InterruptedException ex){}
            }
        }).start();

        new Thread(()->{
            for (int i = 0; i < 10; i++) {
                System.out.println("ProgramA : "+i);
                try{Thread.sleep(1000);}catch(InterruptedException ex){}
            }
        }).start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
    Synchronization
//////////////////////////////////////////////////////////////////////////////////////////
Q35 Exercise
============
package demo;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
class Customer{
    private String id;
    private String name;
    private String address;
    private double salary;

    public Customer(String id, String name, String address, double salary) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.salary = salary;
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the address
     */
    public String getAddress() {
        return address;
    }

    /**
     * @param address the address to set
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * @return the salary
     */
    public double getSalary() {
        return salary;
    }

    /**
     * @param salary the salary to set
     */
    public void setSalary(double salary) {
        this.salary = salary;
    }
    
    
}
class CustomerController{
    public void writeCustomer(Customer customer, String fileName) throws IOException{
        PrintWriter fw=new PrintWriter(new FileWriter(fileName,true),true);//
        fw.write(customer.getId()+",");
        try{Thread.sleep(100);}catch(InterruptedException ex){}
        fw.write(customer.getName()+",");
        try{Thread.sleep(100);}catch(InterruptedException ex){}        
        fw.write(customer.getAddress()+",");
        try{Thread.sleep(100);}catch(InterruptedException ex){}                
        fw.write(customer.getSalary()+",");
        fw.write("\n");
        fw.close();
    }
}
public class Demo {
    public static void main(String[] niroth) throws InterruptedException, IOException {
        Customer customer1=new Customer("C001", "Danapala", "Panadura", 30000);
        Customer customer2=new Customer("C002", "Gunapala", "Galle", 60000);
        CustomerController customerController=new CustomerController();
        customerController.writeCustomer(customer1, "Customer.txt");
        customerController.writeCustomer(customer2, "Customer.txt");
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q36 From Q35 (Using Multi-threads)
==================================
package demo;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

class Customer {

    private String id;
    private String name;
    private String address;
    private double salary;

    public Customer(String id, String name, String address, double salary) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.salary = salary;
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the address
     */
    public String getAddress() {
        return address;
    }

    /**
     * @param address the address to set
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * @return the salary
     */
    public double getSalary() {
        return salary;
    }

    /**
     * @param salary the salary to set
     */
    public void setSalary(double salary) {
        this.salary = salary;
    }

}

class CustomerController {

    synchronized public void writeCustomer(Customer customer) throws IOException {
        PrintWriter fw = new PrintWriter(new FileWriter("Customer.txt", true), true);//
        fw.write(customer.getId() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getName() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getAddress() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getSalary() + "");
        fw.flush();
        fw.write("\n");
        fw.flush();
    }
}

public class Demo {

    public static void main(String[] niroth) throws InterruptedException, IOException {
        Customer customer1 = new Customer("C001", "Danapala", "Panadura", 30000);
        Customer customer2 = new Customer("C002", "Gunapala", "Galle", 60000);
        
        CustomerController customerController = new CustomerController();

        new Thread() {
            public void run() {
                try{customerController.writeCustomer(customer1);}catch(IOException ex){}
            }
        }.start();
        
        new Thread() {
            public void run() {
                try{customerController.writeCustomer(customer2);}catch(IOException ex){}
            }
        }.start();
    }
}


//////////////////////////////////////////////////////////////////////////////////////////
Q37 From Q36 Using Method Synchronization
=========================================
 package demo;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

class Customer {

    private String id;
    private String name;
    private String address;
    private double salary;

    public Customer(String id, String name, String address, double salary) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.salary = salary;
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the address
     */
    public String getAddress() {
        return address;
    }

    /**
     * @param address the address to set
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * @return the salary
     */
    public double getSalary() {
        return salary;
    }

    /**
     * @param salary the salary to set
     */
    public void setSalary(double salary) {
        this.salary = salary;
    }

}

class CustomerController {

    public void writeCustomer(Customer customer) throws IOException {
        PrintWriter fw = new PrintWriter(new FileWriter("Customer.txt", true), true);//
        fw.write(customer.getId() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getName() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getAddress() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getSalary() + "");
        fw.flush();
        fw.write("\n");
        fw.flush();
    }
}

public class Demo {

    public static void main(String[] niroth) throws InterruptedException, IOException {
        Customer customer1 = new Customer("C001", "Danapala", "Panadura", 30000);
        Customer customer2 = new Customer("C002", "Gunapala", "Galle", 60000);
        
        CustomerController customerController = new CustomerController();

        new Thread() {
            public void run() {
                try{customerController.writeCustomer(customer1);}catch(IOException ex){}
            }
        }.start();
        
        new Thread() {
            public void run() {
                try{customerController.writeCustomer(customer2);}catch(IOException ex){}
            }
        }.start();
    }
}


//////////////////////////////////////////////////////////////////////////////////////////
Q38 Two CustomerControllers
===========================
package demo;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

class Customer {

    private String id;
    private String name;
    private String address;
    private double salary;

    public Customer(String id, String name, String address, double salary) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.salary = salary;
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the address
     */
    public String getAddress() {
        return address;
    }

    /**
     * @param address the address to set
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * @return the salary
     */
    public double getSalary() {
        return salary;
    }

    /**
     * @param salary the salary to set
     */
    public void setSalary(double salary) {
        this.salary = salary;
    }

}

class CustomerController {

    synchronized public void writeCustomer(Customer customer) throws IOException {
        PrintWriter fw = new PrintWriter(new FileWriter("Customer.txt", true), true);//
        fw.write(customer.getId() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getName() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getAddress() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getSalary() + "");
        fw.flush();
        fw.write("\n");
        fw.flush();
    }
}

public class Demo {

    public static void main(String[] niroth) throws InterruptedException, IOException {
        Customer customer1 = new Customer("C001", "Danapala", "Panadura", 30000);
        Customer customer2 = new Customer("C002", "Gunapala", "Galle", 60000);
        
        CustomerController customerController1 = new CustomerController();
        CustomerController customerController2 = new CustomerController();

        new Thread() {
            public void run() {
                try{customerController1.writeCustomer(customer1);}catch(IOException ex){}
            }
        }.start();
        
        new Thread() {
            public void run() {
                try{customerController2.writeCustomer(customer2);}catch(IOException ex){}
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q39 Exercise 1
==============
package demo;
class MyClass{
    public void printName(String name){
        System.out.print("[");
        try{Thread.sleep(1000);}catch(Exception ex){}
        System.out.print(name);
        try{Thread.sleep(1000);}catch(Exception ex){}
        System.out.println("]");
    }
}
public class Demo {
    public static void main(String[] niroth){
        MyClass c1=new MyClass();
        c1.printName("ABC");
        c1.printName("XYZ");
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q40 Exercise II From Q39
========================
package demo;

class MyClass {

    public void printName(String name) {
        System.out.print("[");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(name);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("]");
    }
}

public class Demo {

    public static void main(String[] niroth) {
        MyClass c1 = new MyClass();
        new Thread() {
            public void run() {
                c1.printName("ABC");
            }
        }.start();
        new Thread() {
            public void run() {
                c1.printName("XYZ");
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q41 Exercise III From Q40 (Using Synchronization)
========================= =======================
package demo;

class MyClass {

    synchronized  public void printName(String name) {
        System.out.print("[");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(name);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("]");
    }
}

public class Demo {

    public static void main(String[] niroth) {
        MyClass c1 = new MyClass();
        new Thread() {
            public void run() {
                c1.printName("ABC");
            }
        }.start();
        new Thread() {
            public void run() {
                c1.printName("XYZ");
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q42 Exercise IV (From Q41)
==========================
package demo;

class MyClass {

    synchronized  public void printName(String name) {
        System.out.print("[");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(name);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("]");
    }
}

public class Demo {

    public static void main(String[] niroth) {
        MyClass c1 = new MyClass();
        MyClass c2 = new MyClass();
        new Thread() {
            public void run() {
                c1.printName("ABC");
            }
        }.start();
        new Thread() {
            public void run() {
                c2.printName("XYZ");
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q43 Exercise V (From Q41)
=========================
package demo;

class MyClass {

    synchronized  public void printName(String name) {
        System.out.print("[");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(name);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("]");
    }
    public void printAddress(String address) {
        System.out.print("{");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(address);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("}");
    }    
}

public class Demo {

    public static void main(String[] niroth) {
        MyClass c1 = new MyClass();
        new Thread() {
            public void run() {
                c1.printName("ABC");
            }
        }.start();
        new Thread() {
            public void run() {
                c1.printAddress("Panadura");
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q44 Exercise 6 (From Q41)
=========================
package demo;

class MyClass {

    synchronized  public void printName(String name) {
        System.out.print("[");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(name);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("]");
    }
    synchronized  public void printAddress(String address) {
        System.out.print("{");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(address);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("}");
    }    
}

public class Demo {

    public static void main(String[] niroth) {
        MyClass c1 = new MyClass();
        new Thread() {
            public void run() {
                c1.printName("ABC");
            }
        }.start();
        new Thread() {
            public void run() {
                c1.printAddress("Panadura");
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q45 Exercise VII From Q41
=========================
package demo;

class MyClass {

    static synchronized  public void printName(String name) {
        System.out.print("[");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(name);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("]");
    }
    synchronized  public void printAddress(String address) {
        System.out.print("{");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(address);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("}");
    }    
}

public class Demo {

    public static void main(String[] niroth) {
        MyClass c1 = new MyClass();
        new Thread() {
            public void run() {
                c1.printName("ABC");
            }
        }.start();
        new Thread() {
            public void run() {
                c1.printAddress("Panadura");
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q46 Exercise VIII  From Q41
===========================
package demo;

class MyClass {

    static synchronized  public void printName(String name) {
        System.out.print("[");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(name);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("]");
    }
    static  synchronized  public void printAddress(String address) {
        System.out.print("{");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(address);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("}");
    }    
}

public class Demo {

    public static void main(String[] niroth) {
        MyClass c1 = new MyClass();
        new Thread() {
            public void run() {
                c1.printName("ABC");
            }
        }.start();
        new Thread() {
            public void run() {
                c1.printAddress("Panadura");
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q47 From Q46
=============
package demo;

class MyClass {

    static synchronized  public void printName(String name) {
        System.out.print("[");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(name);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("]");
    }
    static  synchronized  public void printAddress(String address) {
        System.out.print("{");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(address);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("}");
    }    
}

public class Demo {

    public static void main(String[] niroth) {
        MyClass c1 = new MyClass();
        MyClass c2 = new MyClass();
        new Thread() {
            public void run() {
                c1.printName("ABC");
            }
        }.start();
        new Thread() {
            public void run() {
                c2.printAddress("Panadura");
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
       Synchronized Blocks
//////////////////////////////////////////////////////////////////////////////////////////
Q48
package demo;

class MyClass {

    public void printName(String name) {
        System.out.print("[");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(name);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("]");
    }
}

public class Demo {

    public static void main(String[] niroth) {
        MyClass c1 = new MyClass();
        Object ob = new Object();
        new Thread() {
            public void run() {
                synchronized (ob) {
                    c1.printName("ABC");
                }
            }
        }.start();
        new Thread() {
            public void run() {
                synchronized (ob) {
                    c1.printName("XYZ");
                }
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q49 From Q37 (Static Method Can be synchronized)
============ ===================================
package demo;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

class Customer {

    private String id;
    private String name;
    private String address;
    private double salary;

    public Customer(String id, String name, String address, double salary) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.salary = salary;
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the address
     */
    public String getAddress() {
        return address;
    }

    /**
     * @param address the address to set
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * @return the salary
     */
    public double getSalary() {
        return salary;
    }

    /**
     * @param salary the salary to set
     */
    public void setSalary(double salary) {
        this.salary = salary;
    }

}

class CustomerController {

    static public void writeCustomer(Customer customer) throws IOException {
        PrintWriter fw = new PrintWriter(new FileWriter("Customer.txt", true), true);//
        fw.write(customer.getId() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getName() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getAddress() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getSalary() + "");
        fw.flush();
        fw.write("\n");
        fw.flush();
    }
}

public class Demo {

    public static void main(String[] niroth) throws InterruptedException, IOException {
        Customer customer1 = new Customer("C001", "Danapala", "Panadura", 30000);
        Customer customer2 = new Customer("C002", "Gunapala", "Galle", 60000);
        
        CustomerController customerController = new CustomerController();

        new Thread() {
            public void run() {
                try{customerController.writeCustomer(customer1);}catch(IOException ex){}
            }
        }.start();
        
        new Thread() {
            public void run() {
                try{customerController.writeCustomer(customer2);}catch(IOException ex){}
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q50 From Q49 (Using synchronized blocks)
=======================================
package demo;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

class Customer {

    private String id;
    private String name;
    private String address;
    private double salary;

    public Customer(String id, String name, String address, double salary) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.salary = salary;
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the address
     */
    public String getAddress() {
        return address;
    }

    /**
     * @param address the address to set
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * @return the salary
     */
    public double getSalary() {
        return salary;
    }

    /**
     * @param salary the salary to set
     */
    public void setSalary(double salary) {
        this.salary = salary;
    }

}

class CustomerController {
    public void  writeCustomer(Customer customer) throws IOException {
        PrintWriter fw = new PrintWriter(new FileWriter("Customer.txt", true), true);//
        fw.write(customer.getId() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getName() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getAddress() + ",");
        fw.flush();
        try {Thread.sleep(100);} catch (InterruptedException ex) {}
        fw.write(customer.getSalary() + "");
        fw.flush();
        fw.write("\n");
        fw.flush();
    }
}

public class Demo {

    public static void main(String[] niroth) throws InterruptedException, IOException {
        Customer customer1 = new Customer("C001", "Danapala", "Panadura", 30000);
        Customer customer2 = new Customer("C002", "Gunapala", "Galle", 60000);
        
        CustomerController customerController = new CustomerController();
        Object ob=new Object();
        new Thread() {
            public void run() {
                synchronized(ob){
                    try{customerController.writeCustomer(customer1);}catch(IOException ex){}
                }
            }
        }.start();
        
        new Thread() {
            public void run() {
                synchronized(ob){
                    try{customerController.writeCustomer(customer2);}catch(IOException ex){}
                }
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q51 Exersice (From Q48)
=======================
package demo;

class MyClass {

    public void printName(String name) {
        System.out.print("[");
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.print(name);
        try {
            Thread.sleep(1000);
        } catch (Exception ex) {
        }
        System.out.println("]");
    }
}

public class Demo {

    public static void main(String[] niroth) {
        MyClass c1 = new MyClass();
        //Object ob = new Object();
        new Thread() {
            public void run() {
                synchronized (c1) {
                    c1.printName("ABC");
                }
            }
        }.start();
        new Thread() {
            public void run() {
                synchronized (c1) {
                    c1.printName("XYZ");
                }
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q52 Exercise
=============
package demo;

public class Demo {

    public static void main(String[] niroth) {
        Object ob = new Object();
        new Thread() {
            public void run() {
                synchronized (ob) {
                    System.out.print("[");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.print("ABC");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.println("]");
                }
            }
        }.start();

        new Thread() {

            public void run() {
                synchronized (ob) {
                    System.out.print("[");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.print("XYZ");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.println("]");
                }
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q53 Exercise
=============
package demo;

public class Demo {

    public static void main(String[] niroth) {
        Object ob = new Object();
        new Thread() {
            public void run() {
                synchronized (new String("abc")) {
                    System.out.print("[");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.print("ABC");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.println("]");
                }
            }
        }.start();

        new Thread() {

            public void run() {
                synchronized (new String("abc")) {
                    System.out.print("[");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.print("XYZ");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.println("]");
                }
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q54 From Q53
============ 
package demo;

public class Demo {

    public static void main(String[] niroth) {
        Object ob = new Object();
        new Thread() {
            public void run() {
                synchronized ("abc") {
                    System.out.print("[");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.print("ABC");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.println("]");
                }
            }
        }.start();

        new Thread() {

            public void run() {
                synchronized ("abc") {
                    System.out.print("[");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.print("XYZ");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                    System.out.println("]");
                }
            }
        }.start();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
Q555


//////////////////////////////////////////////////////////////////////////////////////////
Q5



